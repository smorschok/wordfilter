{"version":3,"sources":["components/Paginate/PaginateDesktop.js","components/Paginate/PaginateMobile.js","components/Paginate/PaginateMain.js","components/DataList.js","components/FilterForm.js","pages/HomePage.js","hooks/http.hook.js","App.js","reportWebVitals.js","index.js"],"names":["PaginateDesktop","currentPage","paginate","paginatePrev","paginateNext","wordsPerPage","totalWords","pageSize","useState","pages","setPages","lastPage","Math","ceil","range","useCallback","from","to","step","i","pageRange","push","fetchPageNumbers","totalNumbers","startPage","max","endPage","min","pageNumbers","hasLeftSpill","hasRightSpill","spillOffset","pageNeighbours","length","extraPages","useEffect","className","Form","Group","as","Row","controlId","Label","column","Col","Control","size","value","onChange","custom","Pagination","Prev","disabled","onClick","map","page","Ellipsis","Item","active","e","Next","PaginateMobile","First","Last","PaginateMain","useMediaQuery","query","DataList","dataList","ListGroup","data","FilterForm","changeHandler","getCheckbox","checkBox","wordLengthBtnDisabled","getDataWordLength","substringBtnDisabled","getDataSubstring","onSubmit","preventDefault","type","placeholder","Check","checked","label","Button","variant","HomePage","loading","setLoading","error","setError","request","url","a","method","body","headers","JSON","stringify","fetch","response","json","ok","Error","message","clearError","useHttp","setDataList","input","setInput","setSubstringBtnDisabled","setWordLengthBtnDisabled","setCheckBox","setCurentPage","setWordsPerPAge","currentWords","setCurrentWords","event","trim","indexLastWord","indexFirstWord","slice","target","isNaN","Number","Spinner","style","width","height","margin","animation","Alert","prev","pageNumber","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78fc6946.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Col, Form, Row, Pagination } from \"react-bootstrap\";\r\n\r\nexport const PaginateDesktop = ({\r\n  currentPage,\r\n  paginate,\r\n  paginatePrev,\r\n  paginateNext,\r\n  wordsPerPage,\r\n  totalWords,\r\n  pageSize,\r\n}) => {\r\n  const [pages, setPages] = useState([]);\r\n  const lastPage = Math.ceil(totalWords / wordsPerPage);\r\n  const range = useCallback((from, to, step = 1) => {\r\n    let i = from;\r\n    const pageRange = [];\r\n    while (i <= to) {\r\n      pageRange.push(i);\r\n      i += step;\r\n    }\r\n\r\n    return pageRange;\r\n  }, []);\r\n\r\n  const fetchPageNumbers = useCallback(() => {\r\n    const pageNeighbours = 1;\r\n    const totalNumbers = pageNeighbours * 2 + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n    if (lastPage > totalBlocks) {\r\n      const startPage = Math.max(2, currentPage - pageNeighbours);\r\n      const endPage = Math.min(lastPage - 1, currentPage + pageNeighbours);\r\n      let pageNumbers = range(startPage, endPage);\r\n\r\n      const hasLeftSpill = startPage > 2;\r\n      const hasRightSpill = lastPage - endPage > 1;\r\n      const spillOffset = totalNumbers - (pageNumbers.length + 1);\r\n\r\n      switch (true) {\r\n        case hasLeftSpill && !hasRightSpill: {\r\n          const extraPages = range(startPage - spillOffset, startPage - 1);\r\n          pageNumbers = [\"LEFT_PAGE\", ...extraPages, ...pageNumbers];\r\n          break;\r\n        }\r\n\r\n        case !hasLeftSpill && hasRightSpill: {\r\n          const extraPages = range(endPage + 1, endPage + spillOffset);\r\n          pageNumbers = [...pageNumbers, ...extraPages, \"RIGHT_PAGE\"];\r\n          break;\r\n        }\r\n\r\n        case hasLeftSpill && hasRightSpill:\r\n        default: {\r\n          pageNumbers = [\"LEFT_PAGE\", ...pageNumbers, \"RIGHT_PAGE\"];\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      return [1, ...pageNumbers, lastPage];\r\n    }\r\n\r\n    return range(1, lastPage);\r\n  }, [currentPage, lastPage, range]);\r\n  useEffect(() => {\r\n    setPages(fetchPageNumbers());\r\n  }, [fetchPageNumbers]);\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column align-items-end\">\r\n      <Form className=\" d-flex \">\r\n        <Form.Group\r\n          as={Row}\r\n          className=\"justify-content-center align-items-center\"\r\n          controlId=\"exampleForm.SelectCustom\"\r\n        >\r\n          <Form.Label column>Page size</Form.Label>\r\n          <Col>\r\n            <Form.Control\r\n              size=\"sm\"\r\n              value={wordsPerPage}\r\n              onChange={pageSize}\r\n              as=\"select\"\r\n              custom\r\n            >\r\n              <option value={5}>5</option>\r\n              <option value={10}>10</option>\r\n              <option value={15}>15</option>\r\n              <option value={20}>20</option>\r\n              <option value={totalWords}>All words</option>\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n      <Pagination>\r\n        <Pagination.Prev disabled={currentPage === 1} onClick={paginatePrev} />\r\n\r\n        {!!pages.length &&\r\n          pages.map((page, i) => {\r\n            if (page === \"LEFT_PAGE\" || page === \"RIGHT_PAGE\") {\r\n              return <Pagination.Ellipsis key={i} disabled />;\r\n            }\r\n\r\n            return (\r\n              <Pagination.Item\r\n                active={currentPage === page}\r\n                key={i}\r\n                onClick={(e) => paginate(e, page)}\r\n              >\r\n                {page}\r\n              </Pagination.Item>\r\n            );\r\n          })}\r\n        <Pagination.Next\r\n          disabled={currentPage === lastPage}\r\n          onClick={() => paginateNext(lastPage)}\r\n        />\r\n      </Pagination>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Col, Form, Row, Pagination } from \"react-bootstrap\";\r\nexport const PaginateMobile = ({\r\n  currentPage,\r\n  paginate,\r\n  paginatePrev,\r\n  paginateNext,\r\n  wordsPerPage,\r\n  totalWords,\r\n  pageSize,\r\n}) => {\r\n  const [pages, setPages] = useState([]);\r\n  useEffect(() => {\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(totalWords / wordsPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n    setPages(pageNumbers);\r\n  }, [setPages, totalWords, wordsPerPage]);\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column align-items-center\">\r\n      <Form className=\" d-flex \">\r\n        <Form.Group\r\n          as={Row}\r\n          className=\"justify-content-center align-items-center\"\r\n          controlId=\"exampleForm.SelectCustom\"\r\n        >\r\n          <Form.Label column>Page size</Form.Label>\r\n          <Col>\r\n            <Form.Control\r\n              size=\"sm\"\r\n              value={wordsPerPage}\r\n              onChange={pageSize}\r\n              as=\"select\"\r\n              custom\r\n            >\r\n              <option value={5}>5</option>\r\n              <option value={10}>10</option>\r\n              <option value={15}>15</option>\r\n              <option value={20}>20</option>\r\n              <option value={totalWords}>All words</option>\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Group>\r\n      </Form>\r\n      <Pagination>\r\n        <Pagination.First\r\n          disabled={currentPage === 1}\r\n          onClick={(e) => paginate(e, 1)}\r\n        />\r\n        <Pagination.Prev disabled={currentPage === 1} onClick={paginatePrev} />\r\n\r\n        <Pagination.Item\r\n          active={currentPage}\r\n          onClick={(e) => paginate(e, currentPage)}\r\n        >\r\n          {currentPage} of {pages.length}\r\n        </Pagination.Item>\r\n\r\n        <Pagination.Next\r\n          disabled={currentPage === pages.length}\r\n          onClick={() => paginateNext(pages.length)}\r\n        />\r\n        <Pagination.Last\r\n          disabled={currentPage === pages.length}\r\n          onClick={(e) => paginate(e, pages.length)}\r\n        />\r\n      </Pagination>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { PaginateDesktop } from \"./PaginateDesktop\";\r\nimport { PaginateMobile } from \"./PaginateMobile\";\r\n\r\nexport const PaginateMain = ({\r\n  currentPage,\r\n  paginate,\r\n  paginatePrev,\r\n  paginateNext,\r\n  wordsPerPage,\r\n  totalWords,\r\n  pageSize,\r\n}) => {\r\n  const isDesktopOrMobile = useMediaQuery({\r\n    query: \"(min-width: 550px)\",\r\n  });\r\n\r\n  if (isDesktopOrMobile) {\r\n    return (\r\n      <PaginateDesktop\r\n        currentPage={currentPage}\r\n        paginate={paginate}\r\n        paginatePrev={paginatePrev}\r\n        paginateNext={paginateNext}\r\n        wordsPerPage={wordsPerPage}\r\n        totalWords={totalWords}\r\n        pageSize={pageSize}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <PaginateMobile\r\n      currentPage={currentPage}\r\n      paginate={paginate}\r\n      paginatePrev={paginatePrev}\r\n      paginateNext={paginateNext}\r\n      wordsPerPage={wordsPerPage}\r\n      totalWords={totalWords}\r\n      pageSize={pageSize}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { PaginateMain } from \"./Paginate/PaginateMain\";\r\n\r\nexport const DataList = ({\r\n  currentPage,\r\n  wordsPerPage,\r\n  totalWords,\r\n  paginate,\r\n  pageSize,\r\n  paginatePrev,\r\n  paginateNext,\r\n  dataList,\r\n}) => {\r\n  return (\r\n    <div className=\"container \">\r\n      <PaginateMain\r\n        currentPage={currentPage}\r\n        paginate={paginate}\r\n        paginatePrev={paginatePrev}\r\n        paginateNext={paginateNext}\r\n        wordsPerPage={wordsPerPage}\r\n        totalWords={totalWords}\r\n        pageSize={pageSize}\r\n      />\r\n      <ListGroup>\r\n        {dataList.map((data, i) => {\r\n          return <ListGroup.Item key={i}>{data}</ListGroup.Item>;\r\n        })}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nexport const FilterForm = ({\r\n  changeHandler,\r\n  value,\r\n  getCheckbox,\r\n  checkBox,\r\n  wordLengthBtnDisabled,\r\n  getDataWordLength,\r\n  substringBtnDisabled,\r\n  getDataSubstring,\r\n}) => {\r\n  return (\r\n    <Form onSubmit={(e) => e.preventDefault()}>\r\n      <div className=\"d-flex flex-column align-items-center\">\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Enter a request</Form.Label>\r\n          <Form.Control\r\n            onChange={changeHandler}\r\n            value={value}\r\n            type=\"text\"\r\n            placeholder=\"Enter text or number\"\r\n          />\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicCheckbox\">\r\n          <Form.Check\r\n            onChange={getCheckbox}\r\n            checked={checkBox}\r\n            type=\"checkbox\"\r\n            label=\"Case-sensitive\"\r\n          />\r\n        </Form.Group>\r\n      </div>\r\n      <div className=\"d-flex justify-content-center\">\r\n        <Button\r\n          disabled={wordLengthBtnDisabled || !value}\r\n          variant=\"primary\"\r\n          onClick={getDataWordLength}\r\n          className=\"m-1\"\r\n        >\r\n          Word length\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          disabled={substringBtnDisabled || !value}\r\n          onClick={getDataSubstring}\r\n          className=\"m-1\"\r\n        >\r\n          Substring\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Alert, Spinner } from \"react-bootstrap\";\r\nimport { DataList } from \"../components/DataList\";\r\nimport { FilterForm } from \"../components/FilterForm\";\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\nexport const HomePage = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n  const [dataList, setDataList] = useState([]);\r\n  const [input, setInput] = useState({ value: \"\" });\r\n  const [substringBtnDisabled, setSubstringBtnDisabled] = useState(true);\r\n  const [wordLengthBtnDisabled, setWordLengthBtnDisabled] = useState(true);\r\n  const [checkBox, setCheckBox] = useState(false);\r\n  const [currentPage, setCurentPage] = useState(1);\r\n  const [wordsPerPage, setWordsPerPAge] = useState(5);\r\n  const [currentWords, setCurrentWords] = useState([]);\r\n\r\n  const getDataWordLength = async (event) => {\r\n    try {\r\n      const data = await request(\"api/data/wordlength\", \"POST\", {\r\n        value: input.value.trim(),\r\n      });\r\n      setDataList(data);\r\n      setInput({ ...input, value: \"\" });\r\n      setCurentPage(1);\r\n      clearError();\r\n    } catch (e) {\r\n      setDataList([]);\r\n    }\r\n  };\r\n  const getDataSubstring = async (event) => {\r\n    try {\r\n      const data = await request(\"api/data/substring\", \"POST\", {\r\n        value: input.value.trim(),\r\n        checkBox,\r\n      });\r\n      setDataList(data);\r\n      setInput({ ...input, value: \"\" });\r\n      setCurentPage(1);\r\n      clearError();\r\n    } catch (e) {\r\n      setDataList([]);\r\n    }\r\n  };\r\n\r\n  const getCheckbox = useCallback(() => {\r\n    setCheckBox(!checkBox);\r\n  }, [checkBox]);\r\n\r\n  const changeHandler = (event) => {\r\n    setInput({ ...input, value: event.target.value });\r\n    if (\r\n      event.target.value &&\r\n      event.target.value.trim() !== \"\" &&\r\n      !isNaN(Number(event.target.value))\r\n    ) {\r\n      setWordLengthBtnDisabled(false);\r\n    } else {\r\n      setWordLengthBtnDisabled(true);\r\n    }\r\n    if (\r\n      event.target.value &&\r\n      !Number(event.target.value) &&\r\n      Number(event.target.value) !== 0\r\n    ) {\r\n      setSubstringBtnDisabled(false);\r\n    } else {\r\n      setSubstringBtnDisabled(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const indexLastWord = currentPage * wordsPerPage;\r\n    const indexFirstWord = indexLastWord - wordsPerPage;\r\n    const data = dataList.slice(indexFirstWord, indexLastWord);\r\n\r\n    setCurrentWords(data);\r\n  }, [dataList, currentPage, wordsPerPage]);\r\n  const paginate = (e, pageNumber) => {\r\n    if (e.target.active) {\r\n      e.target.active = true;\r\n    } else {\r\n      e.target.active = false;\r\n    }\r\n    setCurentPage(pageNumber);\r\n  };\r\n\r\n  const paginatePrev = () => {\r\n    if (currentPage > 1) {\r\n      setCurentPage((prev) => prev - 1);\r\n    }\r\n  };\r\n  const paginateNext = (pageNumbers) => {\r\n    if (currentPage !== pageNumbers.length) {\r\n      setCurentPage((prev) => prev + 1);\r\n    }\r\n  };\r\n  const pageSize = (e) => {\r\n    setWordsPerPAge(Number(e.target.value));\r\n    setCurentPage(1);\r\n  };\r\n  return (\r\n    <div className=\"container mb-2 border rounded border-primary\">\r\n      <div className=\"p-2\">\r\n        <FilterForm\r\n          changeHandler={changeHandler}\r\n          value={input.value}\r\n          getCheckbox={getCheckbox}\r\n          checkBox={checkBox}\r\n          wordLengthBtnDisabled={wordLengthBtnDisabled}\r\n          getDataWordLength={getDataWordLength}\r\n          substringBtnDisabled={substringBtnDisabled}\r\n          getDataSubstring={getDataSubstring}\r\n        />\r\n        {loading && (\r\n          <Spinner\r\n            style={{ width: \"6rem\", height: \"6rem\", margin: \"1rem\" }}\r\n            animation=\"border\"\r\n            variant=\"primary\"\r\n          />\r\n        )}\r\n        {error && !loading && <Alert variant={\"danger\"}>{error}</Alert>}\r\n\r\n        {!loading && !!dataList.length && (\r\n          <DataList\r\n            dataList={currentWords}\r\n            currentPage={currentPage}\r\n            paginatePrev={paginatePrev}\r\n            paginateNext={paginateNext}\r\n            pageSize={pageSize}\r\n            wordsPerPage={wordsPerPage}\r\n            totalWords={dataList.length}\r\n            paginate={paginate}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import {useState,useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading,setLoading] = useState(false)\r\n    const [error,setError] = useState(null)\r\n    const request =useCallback(async (url,method = 'GET', body = null, headers = {}) =>{\r\n        setLoading(true)\r\n        try{\r\n            if(body){\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url,{method,body,headers})\r\n            const data = await response.json()\r\n            if(!response.ok){\r\n                \r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n            setLoading(false)\r\n\r\n            return data\r\n        }catch(e){\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n            \r\n        }\r\n    },[])\r\n\r\n    const clearError = useCallback (()=> setError(null),[])\r\n\r\n    return {loading,request,error,clearError}\r\n}","import \"./App.css\";\nimport { HomePage } from \"./pages/HomePage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}